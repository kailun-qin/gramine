loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "{{ entrypoint }}"
loader.argv0_override = "{{ entrypoint }}"

loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"
loader.insecure__use_cmdline_argv = true

# for eventfd test
sys.insecure__allow_eventfd = true

fs.mount = [
  {
    type = "chroot",
    path = "/lib",
    uri = "file:{{ gramine.runtimedir(libc) }}"
  },
  {
    type = "chroot",
    path = "{{ entrypoint }}",
    uri = "file:{{ binary_dir }}/{{ entrypoint }}"
  },
  {
    type = "chroot",
    path = "exec_victim",
    uri = "file:{{ binary_dir }}/exec_victim"
  },
  {
    type = "chroot",
    path = "{{ arch_libdir }}",
    uri = "file:{{ arch_libdir }}"
  },
  {
    type = "chroot",
    path = "/usr/{{ arch_libdir }}",
    uri = "file:/usr/{{ arch_libdir }}"
  },
  {
    type = "chroot",
    path = "/bin",
    uri = "file:/bin"
  },
  {
    type = "tmpfs",
    path = "/mnt/tmpfs",
    uri = "file:dummy-unused-by-tmpfs-uri"
  },
]

sgx.thread_num = 16
sgx.nonpie_binary = true
sgx.debug = true

sgx.allowed_files = [
  "file:tmp/",
  "file:root", # for getdents test
  "file:testfile", # for mmap_file test
]

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:{{ gramine.runtimedir(libc) }}/",
  "file:{{ arch_libdir }}/libgcc_s.so.1",
  "file:/usr{{ arch_libdir }}/libstdc++.so.6",
  "file:{{ binary_dir }}/{{ entrypoint }}",
  "file:{{ binary_dir }}/exec_victim",
]

sgx.insecure__protected_files_key = "ffeeddccbbaa99887766554433221100"
sgx.protected_files = [
  "file:tmp/pf/",
]

# for sealed_file_mrenclave* tests
sgx.protected_mrenclave_files = [
  "file:sealed_file_mrenclave.dat",
]

# for sealed_file_mrsigner test
sgx.protected_mrsigner_files = [
  "file:sealed_file_mrsigner.dat",
]
